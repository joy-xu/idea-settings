<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>bigtable</entry>
        <entry>status</entry>
        <entry>operateMonth</entry>
        <entry>zadd</entry>
        <entry>Pair</entry>
        <entry encoding="base64">XDxuYW1lXD4=</entry>
        <entry>olap</entry>
        <entry encoding="base64">XDxTdHJpbmdcPg==</entry>
        <entry>ALREADY_OFF</entry>
        <entry>schedul</entry>
        <entry>restart</entry>
        <entry>maven</entry>
        <entry>guava</entry>
        <entry>executor</entry>
        <entry>Blocking</entry>
        <entry>PPR</entry>
        <entry>ppr</entry>
        <entry>Function</entry>
        <entry>work_place</entry>
        <entry>TODO</entry>
      </history-search>
      <history-cmd>
        <entry>1290</entry>
        <entry>%/s/long/Long/g</entry>
        <entry>%s/long/Long/g</entry>
        <entry>%s/int/Integer/g</entry>
        <entry>%s/Date/LocalDateTime/g</entry>
        <entry>%s/user/employee/g</entry>
        <entry>%s/,/;/g</entry>
        <entry>%s/localDateTime/startTime/g</entry>
        <entry>330</entry>
        <entry>192</entry>
        <entry>2634</entry>
        <entry>1480</entry>
        <entry>%A,</entry>
        <entry>%normal A,</entry>
        <entry>%normal A;</entry>
        <entry>%snormal A,</entry>
        <entry>%s normal A,</entry>
        <entry>%s normal I&quot;</entry>
        <entry>q!</entry>
        <entry>wq</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_20.java" timestamp="1605595794412">
        <mark key="'" line="26" column="51" />
        <mark key="[" line="72" column="0" />
        <mark key="]" line="72" column="0" />
        <mark key="." line="72" column="0" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/shardingmapper/DingTalkAttendanceStatisticsShardingMapper.java" timestamp="1605600017268">
        <mark key="'" line="31" column="0" />
        <mark key="[" line="87" column="45" />
        <mark key="]" line="87" column="42" />
        <mark key="^" line="87" column="42" />
        <mark key="." line="87" column="41" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" timestamp="1605663001596">
        <mark key="'" line="272" column="4" />
        <mark key="[" line="283" column="50" />
        <mark key="]" line="284" column="28" />
        <mark key="." line="284" column="27" />
        <mark key="^" line="284" column="28" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/metaq/WmpTaskBatchEndConsumer.java" timestamp="1605606177451">
        <mark key="'" line="129" column="37" />
        <mark key="[" line="129" column="40" />
        <mark key="]" line="129" column="46" />
        <mark key="^" line="129" column="46" />
        <mark key="." line="129" column="45" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/impl/DingTalkAttendanceStatisticsManagerImpl.java" timestamp="1605664748688">
        <mark key="'" line="95" column="75" />
        <mark key="[" line="53" column="40" />
        <mark key="]" line="53" column="48" />
        <mark key="." line="53" column="47" />
        <mark key="^" line="53" column="48" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/config/SpringCacheConfig.java" timestamp="1605528181731">
        <mark key="[" line="29" column="53" />
        <mark key="]" line="29" column="70" />
        <mark key="^" line="29" column="70" />
        <mark key="." line="29" column="69" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-common/src/main/java/com/cainiao/lms/config/SequenceConfig.java" timestamp="1605664678510">
        <mark key="'" line="80" column="5" />
        <mark key="[" line="133" column="39" />
        <mark key="]" line="133" column="39" />
        <mark key="." line="133" column="38" />
        <mark key="^" line="133" column="39" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/HbaseCompletableFuture.java" timestamp="1605595961051">
        <mark key="'" line="15" column="19" />
        <mark key="[" line="10" column="64" />
        <mark key="]" line="10" column="66" />
        <mark key="^" line="10" column="66" />
        <mark key="." line="10" column="65" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" timestamp="1605662854088">
        <mark key="[" line="170" column="88" />
        <mark key="]" line="171" column="8" />
        <mark key="." line="171" column="7" />
        <mark key="^" line="171" column="8" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/FetchHbaseTask.java" timestamp="1605596793003">
        <mark key="[" line="12" column="15" />
        <mark key="]" line="12" column="21" />
        <mark key="." line="12" column="20" />
        <mark key="^" line="12" column="21" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/provider/DingTalkAttendanceStatisticsShardingProvider.java" timestamp="1605664863254">
        <mark key="[" line="8" column="80" />
        <mark key="]" line="9" column="4" />
        <mark key="^" line="9" column="4" />
        <mark key="." line="9" column="3" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/impl/HBaseServiceImpl.java" timestamp="1605609217901">
        <mark key="[" line="155" column="46" />
        <mark key="]" line="155" column="56" />
        <mark key="." line="155" column="55" />
        <mark key="^" line="155" column="56" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" timestamp="1605664709831">
        <mark key="'" line="815" column="43" />
        <mark key="[" line="815" column="101" />
        <mark key="]" line="816" column="77" />
        <mark key="." line="816" column="76" />
        <mark key="^" line="816" column="77" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-common/src/main/java/com/cainiao/lms/middleware/diamond/SwitchProperty.java" timestamp="1605598481263">
        <mark key="[" line="747" column="41" />
        <mark key="]" line="747" column="41" />
        <mark key="^" line="747" column="41" />
        <mark key="." line="747" column="40" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/indirectlabour/impl/IndirectLabourManagerImpl.java" timestamp="1605664652821">
        <mark key="'" line="263" column="65" />
        <mark key="[" line="52" column="0" />
        <mark key="]" line="52" column="73" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/impl/DingTalkAttendanceStatisticsManagerLzdImpl.java" timestamp="1605599726685">
        <mark key="'" line="292" column="47" />
        <mark key="[" line="60" column="0" />
        <mark key="]" line="60" column="0" />
        <mark key="." line="60" column="0" />
        <mark key="^" line="49" column="70" />
      </file>
      <file name="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/mapper/DingTalkAttendanceStatisticsMapper.java" timestamp="1605600026301">
        <mark key="'" line="34" column="0" />
        <mark key="[" line="36" column="11" />
        <mark key="]" line="36" column="11" />
        <mark key="^" line="36" column="14" />
        <mark key="." line="36" column="11" />
      </file>
      <file name="/fragment.java" timestamp="1605664801679">
        <mark key="[" line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="108" column="20" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="465" column="29" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="79" column="99" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/impl/LabourPprModuleServiceImpl.java" />
      <jump line="917" column="58" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="34" column="59" filename="$USER_HOME$/cainiao/wmplms/wmplms-common/src/main/java/com/cainiao/lms/middleware/tair/KvStoreCacheManager.java" />
      <jump line="316" column="9" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="49" column="24" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="75" column="24" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="100" column="20" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="778" column="35" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="785" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="847" column="35" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="857" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="77" column="8" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="102" column="26" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="107" column="41" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="616" column="32" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="624" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="777" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="789" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="846" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="861" column="22" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="64" column="26" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="69" column="41" filename="$USER_HOME$/cainiao/wmplms/wmplms-web/src/main/resources/logback-spring.xml" />
      <jump line="82" column="23" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="148" column="13" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="182" column="28" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="62" column="34" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="180" column="12" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractPprHandler.java" />
      <jump line="678" column="38" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="139" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1297" column="16" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="103" column="33" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1397" column="20" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1417" column="8" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1377" column="48" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1418" column="4" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1419" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1378" column="58" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1386" column="27" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1384" column="49" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1385" column="63" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1383" column="32" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1394" column="25" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1395" column="93" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1429" column="16" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1381" column="31" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="886" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1376" column="16" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="96" column="37" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="142" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1440" column="16" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1390" column="35" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1388" column="29" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1442" column="16" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="140" column="90" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1391" column="30" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="141" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="104" column="4" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1450" column="63" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="24" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/scratch_20.java" />
      <jump line="17" column="7" filename="$APPLICATION_CONFIG_DIR$/scratches/scratch_20.java" />
      <jump line="27" column="0" filename="$APPLICATION_CONFIG_DIR$/scratches/scratch_20.java" />
      <jump line="672" column="34" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="675" column="12" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="1399" column="45" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="669" column="29" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="653" column="12" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="713" column="8" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="689" column="4" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="687" column="30" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="690" column="4" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="631" column="77" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="223" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/mapper/DingTalkAttendanceStatisticsMapper.java" />
      <jump line="100" column="32" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/provider/DingTalkAttendanceStatisticsProvider.java" />
      <jump line="104" column="75" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/impl/DingTalkAttendanceStatisticsManagerImpl.java" />
      <jump line="184" column="42" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/mapper/DingTalkAttendanceStatisticsMapper.java" />
      <jump line="11" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/DingTalkAttendanceStatisticsManager.java" />
      <jump line="26" column="1" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/DingTalkAttendanceStatisticsManager.java" />
      <jump line="148" column="7" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/DingTalkAttendanceStatisticsManager.java" />
      <jump line="155" column="7" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/DingTalkAttendanceStatisticsManager.java" />
      <jump line="198" column="7" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/DingTalkAttendanceStatisticsManager.java" />
      <jump line="152" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/mapper/DingTalkAttendanceStatisticsMapper.java" />
      <jump line="31" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/shardingmapper/DingTalkAttendanceStatisticsShardingMapper.java" />
      <jump line="263" column="65" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/indirectlabour/impl/IndirectLabourManagerImpl.java" />
      <jump line="113" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/impl/DingTalkAttendanceStatisticsManagerLzdImpl.java" />
      <jump line="222" column="15" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="102" column="46" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="36" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/mapper/DingTalkAttendanceStatisticsMapper.java" />
      <jump line="100" column="37" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="26" column="51" filename="$APPLICATION_CONFIG_DIR$/scratches/scratch_20.java" />
      <jump line="17" column="19" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/HbaseCompletableFuture.java" />
      <jump line="115" column="11" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="117" column="15" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="267" column="4" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/ScPprHandler.java" />
      <jump line="292" column="47" filename="$USER_HOME$/cainiao/wmplms/wmplms-manager/src/main/java/com/cainiao/lms/manager/impl/DingTalkAttendanceStatisticsManagerLzdImpl.java" />
      <jump line="129" column="37" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/metaq/WmpTaskBatchEndConsumer.java" />
      <jump line="80" column="5" filename="$USER_HOME$/cainiao/wmplms/wmplms-common/src/main/java/com/cainiao/lms/config/SequenceConfig.java" />
      <jump line="809" column="43" filename="$USER_HOME$/cainiao/wmplms/wmplms-biz/src/main/java/com/cainiao/lms/service/ppr/handler/AbstractBasePprHandler.java" />
      <jump line="46" column="0" filename="$USER_HOME$/cainiao/wmplms/wmplms-mapper/src/main/java/com/cainiao/lms/provider/DingTalkAttendanceStatisticsShardingProvider.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text>）</text>
      </register>
      <register name="/" type="4">
        <text>TODO</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICB3b3JrUXVldWUucHV0KG5ldyBNeUZ1dHVyZTxTdHJpbmc+KCIyMDAiKSk7Cg==</text>
      </register>
      <register name="1" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBXT1JLX1BMQUNFX0NPREUgPSAid29ya19wbGFjZV9jb2RlIjsK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICogQHZlcnNpb24gMS4wCg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIC8vIFRPRE8g5LiK57q/5pu/5o2iCg==</text>
      </register>
      <register name="u" type="4">
        <keys>
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="117" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="66" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="83" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="65535" code="69" mods="130" />
          <key char="65535" code="91" mods="130" />
          <key char="65" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="21024" code="0" mods="0" />
          <key char="38500" code="0" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="83" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65535" code="80" mods="130" />
          <key char="106" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="21517" code="0" mods="0" />
          <key char="31216" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="26597" code="0" mods="0" />
          <key char="35810" code="0" mods="0" />
          <key char="20070" code="0" mods="0" />
          <key char="35759" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="23646" code="0" mods="0" />
          <key char="24615" code="0" mods="0" />
          <key char="65535" code="40" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="20998" code="0" mods="0" />
          <key char="39029" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="36215" code="0" mods="0" />
          <key char="22987" code="0" mods="0" />
          <key char="39029" code="0" mods="0" />
          <key char="65535" code="40" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="39029" code="0" mods="0" />
          <key char="25968" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="27599" code="0" mods="0" />
          <key char="39029" code="0" mods="0" />
          <key char="35760" code="0" mods="0" />
          <key char="24405" code="0" mods="0" />
          <key char="25968" code="0" mods="0" />
          <key char="37327" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="23454" code="0" mods="0" />
          <key char="20363" code="0" mods="0" />
          <key char="21015" code="0" mods="0" />
          <key char="34920" code="0" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="20998" code="0" mods="0" />
          <key char="39029" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="48" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="40" code="0" mods="0" />
          <key char="83" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="85" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="66" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="66" code="0" mods="0" />
          <key char="59" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="123" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65535" code="91" mods="130" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65535" code="91" mods="130" />
          <key char="112" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="40" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="65535" code="91" mods="130" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="84" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="84" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="82" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="82" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="118" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="79" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="38" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="79" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="46" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="34" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="59" code="0" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="84" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="78" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="10" mods="0" />
          <key char="65535" code="37" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="21015" code="0" mods="0" />
          <key char="34920" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="39" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="120" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="20840" code="0" mods="0" />
          <key char="37096" code="0" mods="0" />
          <key char="24212" code="0" mods="0" />
          <key char="29992" code="0" mods="0" />
          <key char="21015" code="0" mods="0" />
          <key char="34920" code="0" mods="0" />
        </keys>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICBDb21wbGV0YWJsZUZ1dHVyZTxFbXBsb3llZVBwckNvbnRleHQ+IGNvbnRleHRGdXR1cmUgPSBuZXcgQ29tcGxldGFibGVGdXR1cmU8PigpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgbG9nZ2VyLmluZm8oImhiYXNlIGZldGNoQ291bnQ6IHt9LCBmdXR1cmVTaXplOiB7fSIsIGZldGNoRnV0dXJlQ291bnQsIGZldGNoRnV0dXJlcy5zaXplKCkpOwo=</text>
      </register>
      <register name=":" type="4">
        <text>wq</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search>TODO</last-search>
      <last-offset />
      <last-pattern>TODO</last-pattern>
      <last-replace>startTime</last-replace>
      <last-substitute>localDateTime</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>